name: "Go Test Workflow"

on:
  push:
    branches:
      - main
      - release-**
  pull_request:

permissions:
  contents: read

jobs:
  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Healthcheck
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Fetch base branch
        if: ${{ github.event_name == 'pull_request'}}
        run: git fetch origin ${{ github.base_ref }}
      - name: golangci-lint
        if: ${{ github.event_name == 'pull_request'}}
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --out-format=checkstyle:golanglint.xml --timeout=600s --max-issues-per-linter=0 --max-same-issues=0 --new-from-rev=origin/${{ github.base_ref }}
      - uses: actions/upload-artifact@v2
        with:
          name: golangcilint
          retention-days: 1
          path: |
            golanglint.xml
  ci-test:
    name: "tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.21'

      - name: Install Dependencies and basic hygiene test
        id: hygiene
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Run tests
        run: |
          ./bin/ci-tests.sh

      - uses: actions/upload-artifact@v2
        with:
          name: coverage
          retention-days: 1
          path: |
            *cov

  sonar-cloud-analysis:
    runs-on: ubuntu-latest
    needs: [ ci-test, golangci-lint ]
    steps:
      - name: Checkout healthcheck
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Fetch base branch
        if: ${{ github.event_name == 'pull_request' }}
        run: git fetch origin ${{ github.base_ref }}
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: Download coverage artifacts
        uses: actions/download-artifact@v2
        with:
          name: coverage
      - name: Download golangcilint artifacts
        uses: actions/download-artifact@v2
        with:
          name: golangcilint
      - name: Check reports existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: '*.cov, golanglint.xml'

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=tyktechnologies
            -Dsonar.projectKey=TykTechnologies_healthcheck
            -Dsonar.sources=.
            -Dsonar.exclusions=ci/**
            -Dsonar.coverage.exclusions=**/*_test.go,**/mocks/*.go
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.tests=.
            -Dsonar.go.coverage.reportPaths=*.cov
            -Dsonar.go.golangci-lint.reportPaths=golanglint.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}